<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zpt.shop.main.mapper.GoodsMapper">

	<!-- ********** ResultMap ********** -->
	<resultMap type="goods" id="resultMap">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="exp_name" column="exp_name" />			
		<result property="quantity" column="quantity" />			
		<result property="content" column="content" />			
		<result property="code" column="code" />			
		<result property="brandId" column="brandId" />			
		<result property="store" column="store" />	
		<result property="typeId" column="typeId" />						
		<result property="typename" column="typename" />						
		<result property="brandName" column="brandName" />						
		<result property="top" column="top" />	
		<result property="ids" column="ids" />	
		<result property="num" column="num" />
		<result property="price" column="price" />
		<result property="url" column="url" />		
		<result property="url1" column="url1" />		
		<result property="url2" column="url2" />		
		<result property="url3" column="url3" />		
		<result property="state" column="state" />		
		<result property="suppliername" column="suppliername" />		
		<collection property="pros" column="pros" ofType="Pro">    
            <id property="id" column="proId" />
            <result property="name" column="proname" />
        </collection>					
	</resultMap>
	
	
	<sql id="queryCondition">
		where 1 = 1 and (goods.state = 1 or goods.state =2)
		<if test="obj.name != null and obj.name != ''">
			and goods.name like CONCAT('%',#{obj.name},'%')
		</if>
		<if test="obj.content != null and obj.content != ''">
			and goods.content like CONCAT('%',#{obj.content},'%')			
		</if>			
		<if test="obj.code != null and obj.code != ''">
			and goods.code like CONCAT('%',#{obj.code},'%')
		</if>
		<if test="obj.typeId != null and obj.typeId != ''">
			and (goods.typeId = #{obj.typeId} or type.pid = #{obj.typeId})
		</if>		
		<if test="search != null and search != ''">
			and (goods.name like CONCAT('%',#{search},'%') or
			supplier.name like CONCAT('%',#{search},'%') or
			goods.quantity like CONCAT('%',#{search},'%') or
			goods.code like CONCAT('%',#{search},'%') or
			brand.name like CONCAT('%',#{search},'%') or
			goods.store like CONCAT('%',#{search},'%'))
		</if>	
							
	</sql>
	
	<sql id="validateCondition">
		where 1 = 1 and (state = 1 or state =2)
		<if test="id != null and id != ''">
			and id != #{id}
		</if>
		<if test="name != null and name != ''">
			and name = #{name}
		</if>						
		<if test="exp_name != null and exp_name != ''">
			and exp_name = #{exp_name}
		</if>							
		<if test="code != null and code != ''">
			and code = #{code}
		</if>										
	</sql>	
		
	<select id="listGoods" resultMap="resultMap" parameterType="query">
		<include refid="com.zpt.shop.main.mapper.CommonMapper.beginSplitPage"/>
		SELECT goods.id AS id,goods.name AS NAME,goods.exp_name AS exp_name,goods.typeId AS typeId,goods.top AS top,
		goods.quantity AS quantity,goods.content AS content,goods.code AS CODE,goods.searchval AS searchval,
		goods.brandId AS brandId,goods.ids AS ids,brand.name AS brandName,type.name AS typename,
		goods.store AS store,goods.state AS state,type.pid AS pid,supplier.name AS suppliername,
		images.url1 AS url1,images.url2 AS url2,images.url3 AS url3
		FROM t_goods AS goods 
		LEFT JOIN t_goods_images AS images ON images.goodsid = goods.id
		LEFT JOIN t_goods_brand AS brand ON goods.brandId = brand.id 
		LEFT JOIN t_goods_type AS TYPE ON goods.typeId = type.id 
		LEFT JOIN t_goods_supplier AS supplier ON supplier.id = brand.supplierid
		<include refid="queryCondition"/>
		<include refid="com.zpt.shop.main.mapper.CommonMapper.endSplitPage"/>
	</select>
	
	<select id="countGoods" resultType="java.lang.Integer" parameterType="query">
		select count(goods.id) from t_goods as goods 
		left join t_goods_brand as brand on goods.brandId = brand.id 
		left join t_goods_type as type on goods.typeId = type.id
		left join t_goods_supplier as supplier on supplier.id = brand.supplierid
		<include refid="queryCondition"/>
	</select>
	
	<select id="getGoodsId" resultMap="resultMap">
		SELECT goods.id AS id,goods.name AS NAME,goods.exp_name AS exp_name,goods.typeId AS typeId,goods.top AS top,
		goods.quantity AS quantity,goods.content AS content,goods.code AS CODE,goods.searchval AS searchval,
		goods.brandId AS brandId,goods.ids AS ids,brand.name AS brandName,type.name AS typename,goods.store AS store,
		pro.name AS proname,pro.id AS proId,goods.state AS state,supplier.name AS suppliername,images.url1 AS url1,
		images.url2 AS url2,images.url3 AS url3
		FROM t_goods AS goods 
		LEFT JOIN t_goods_brand AS brand ON goods.brandId = brand.id 
		LEFT JOIN t_goods_type AS TYPE ON goods.typeId = type.Id 
		LEFT JOIN t_goods_pro AS pro ON pro.typeId = type.id 
		LEFT JOIN t_goods_supplier AS supplier ON supplier.id = brand.supplierid
		LEFT JOIN t_goods_images AS images ON images.goodsid = goods.id
		WHERE (goods.state = 1 or goods.state =2) AND goods.id = #{goodsId} and concat(',',goods.ids,',') like CONCAT('%,',pro.id,',%')
	</select>
	<!-- 验证当前数据是否存在 -->
	<select id="validate" resultMap="resultMap" parameterType="goods">
		select * from t_goods
		<include refid="validateCondition"/>
	</select>
		
	<insert id="insertGoods" parameterType="goods" useGeneratedKeys="true" keyProperty="id">
		insert into t_goods(name,exp_name,quantity,content,code,brandId,store,typeId,ids,state,num) 
		values(#{name},#{exp_name},#{quantity},#{content},#{code},#{brandId},#{store},#{typeId},#{ids},2,0)
	</insert>
	<update id="deleteGoods" parameterType="goods">
		update t_goods set state = 0 where id in (${ids})
	</update>
	<update id="updateGoods" parameterType="goods">
		update t_goods set name = #{name},code = #{code},brandId = #{brandId},store = #{store}
		where id = #{id}
	</update>
	<update id="stickGoods" parameterType="goods">
		update t_goods set top = #{top} where id = #{id}
	</update>
	
	<update id="downGoods" parameterType="goods">
		update t_goods set top = null where id = #{id}
	</update>
	
	<update id="updateContent" parameterType="goods">
		update t_goods set content = #{content} where id = #{id}
	</update>
	
	<update id="updateQuantity" parameterType="goods">
		update t_goods set quantity = (#{quantity}+t_goods.quantity) where id = #{id}
	</update>
	
	<update id="updateState">
		update t_goods set state = #{state} where id = #{id}
	</update>
	
	<select id="getGoods" resultMap="resultMap">
		select * from t_goods left join
		(select sku.goodsid, sku.price as price, image.url from
		(select * from (select * from t_goods_sku order by goodsid, price) as t
		group by t.goodsid) as sku left join t_goods_image as image 
		on sku.id = image.skuid) as g 
		on t_goods.id = g.goodsid
		where state = 1
		order by top desc, id desc
		limit #{pageStart},#{num}
	</select>
	
	<select id="getGoodsTotal" resultType="java.lang.Integer">
		select count(id) from t_goods where state = 1 
		<if test="flag == 3">
			and quantity &gt; 0
		</if>
		<if test="keyword != null and keyword != ''">
			and name like CONCAT('%',#{keyword},'%')
		</if>
		<if test="typeId != null and typeId != ''">
			and (typeid = #{typeId}
			or typeid in 
			(select id from t_goods_type where pid = #{typeId}))
		</if>
	</select>
	
	<select id="getGoodsByCondition" resultMap="resultMap">
		select * from t_goods left join
		(select sku.goodsid, sku.price as price, image.url from
		(select * from (select * from t_goods_sku order by goodsid, price) as t
		group by t.goodsid) as sku left join t_goods_image as image 
		on sku.id = image.skuid) as g 
		on t_goods.id = g.goodsid 
		<if test="flag == 1">
		    where state = 1
			ORDER BY t_goods.id DESC
		</if>
		<if test="flag == 2">
		    where state = 1
			ORDER BY t_goods.num DESC
		</if>
		<if test="flag == 3">
			where state = 1 and t_goods.quantity &gt; 0
			ORDER BY t_goods.id DESC
		</if>
		<if test="keyword != null and keyword != ''">
			where state = 1 and t_goods.name like CONCAT('%',#{keyword},'%')
			ORDER BY t_goods.id DESC
		</if>
		<if test="typeId != null and typeId != ''">
			where state = 1 and
			(t_goods.typeid = #{typeId} or t_goods.typeid in (select id from t_goods_type where pid = #{typeId}))
			ORDER BY t_goods.id DESC
		</if>
		limit #{pageStart},#{num}
	</select>
	
	<select id="getLowGoodsById" resultMap="resultMap">
		select * from t_goods left join
		(select sku.goodsid, sku.price as price, image.url from
		(select * from (select * from t_goods_sku order by goodsid, price) as t
		group by t.goodsid) as sku left join t_goods_image as image 
		on sku.id = image.skuid) as g 
		on t_goods.id = g.goodsid where t_goods.id = #{goodsId}
	</select>
	
	<select id="getHighGoodsById" resultMap="resultMap">
		select * from t_goods left join
		(select sku.goodsid, sku.price as price, image.url from
		(select * from (select * from t_goods_sku order by goodsid desc, price desc) as t
		group by t.goodsid) as sku left join t_goods_image as image 
		on sku.id = image.skuid) as g 
		on t_goods.id = g.goodsid where t_goods.id = #{goodsId}
	</select>
	
	<select id="getGoodsInfo" resultMap="resultMap">
		select * from t_goods where id = #{goodsId}
	</select>
	
	<update id="updateNum">
		update t_goods set num = #{num} where id = #{id}
	</update>
	
	<update id="updateTotal">
		update t_goods set quantity = #{quantity} where id = #{id}
	</update>
	
</mapper>
