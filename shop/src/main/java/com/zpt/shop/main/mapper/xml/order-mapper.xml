<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zpt.shop.main.mapper.OrderMapper">

	<!-- ********** ResultMap ********** -->
	<resultMap type="order" id="resultMap">
		<id property="id" column="id" />
		<result property="userId" column="userId" />
		<result property="address" column="address" />
		<result property="ordertime" column="ordertime" />
		<result property="logisticsnum" column="logisticsnum" />
		<result property="logistics" column="logistics" />
		<result property="state" column="state" />
		<result property="name" column="name" />
		<result property="phone" column="phone" />
		<result property="totalPrice" column="totalPrice" />
		<result property="memo" column="memo" />
		<result property="ordernum" column="ordernum" />
		<result property="postalCode" column="postalCode" />
		<result property="provinceName" column="provinceName" />
		<result property="cityName" column="cityName" />
		<result property="countryName" column="countryName" />
		<collection property="orderDetail" columnPrefix="detail_" ofType="OrderDetail" javaType="ArrayList">    
            <id property="id" column="detailId" />
			<result property="orderId" column="orderId" />
			<result property="skuId" column="skuId" />
			<result property="num" column="num" />
			<result property="price" column="price" />
			<result property="totalPrice" column="totalPrice" />
			<result property="goodsId" column="goodsId" />
			<result property="name" column="name" />
			<result property="url" column="url" />
			<result property="val" column="val" />
			<result property="provalue" column="provalue" />
			<result property="proname" column="proname" />
        </collection>
	</resultMap>
	
	<sql id="queryCondition">
		where 1 = 1 and torder.state &gt; 1
		<if test="obj.logistics != null and obj.logistics != ''">
			and torder.logistics like CONCAT('%',#{obj.logistics},'%')
		</if>
		<if test="obj.logisticsnum != null and obj.logisticsnum != ''">
			and torder.logisticsnum like CONCAT('%',#{obj.logisticsnum},'%')
		</if>
		<if test="obj.ordernum != null and obj.ordernum != ''">
			and torder.ordernum like CONCAT('%',#{obj.ordernum},'%')
		</if>
		<if test="obj.state != null and obj.state != ''">
			and torder.state like CONCAT('%',#{obj.state},'%')
		</if>
		<if test="search != null and search != ''">
			and (torder.logistics like CONCAT('%',#{search},'%') or
				torder.logisticsnum like CONCAT('%',#{search},'%') or
				torder.ordernum like CONCAT('%',#{search},'%') or
				torder.phone like CONCAT('%',#{search},'%') or
				torder.address like CONCAT('%',#{search},'%') or
				torder.name like CONCAT('%',#{search},'%'))
		</if>
	</sql>
	
	<sql id="validateCondition">
		where 1 = 1
		<if test="id != null and id != ''">
			and id != #{id}
		</if>										
	</sql>	
		
	<select id="listOrder" resultMap="resultMap" parameterType="query">
		<include refid="com.zpt.shop.main.mapper.CommonMapper.beginSplitPage"/>
		select torder.id as id,torder.userId as userId,torder.ordertime as ordertime,
		torder.logisticsnum as logisticsnum,torder.logistics as logistics,torder.state as state,
		torder.name as name,torder.phone as phone,goods.name as goodsName,torder.totalPrice as totalPrice,
		torder.memo as memo,torder.ordernum as ordernum,
		concat(torder.provinceName,torder.cityName,torder.countryName,torder.address) as address
		from t_order as torder 
		left join t_user as tuser on torder.userId = tuser.id 
		left join t_order_detail as orderdetail on torder.id = orderdetail.orderId 
		left join t_goods_sku as sku on sku.id = orderdetail.skuId 
		left join t_goods as goods on sku.goodsid = goods.id				
		<include refid="queryCondition"/>
		<include refid="com.zpt.shop.main.mapper.CommonMapper.endSplitPage"/>
	</select>
	
	<select id="countOrder" resultType="java.lang.Integer" parameterType="query">
		select count(torder.id) from t_order as torder left join t_user as tuser on 
		torder.userId = tuser.id
		<include refid="queryCondition"/>
	</select>	
	
	<!-- 验证当前数据是否存在 -->
	<select id="validate" resultMap="resultMap" parameterType="order">
		select * from t_order
		<include refid="validateCondition"/>
	</select>
	
	<update id="updateState" parameterType="order">
		update t_order set state = #{state} where id = #{id}
	</update>
	
	<update id="seeOrder" parameterType="order">
		update t_order set memo = #{memo},logistics = #{logistics},logisticsnum = #{logisticsnum} where id = #{id}
	</update>
	
	<select id="seeOrderAll" resultMap="resultMap">
		select torder.id as id,torder.ordertime as ordertime,
		torder.logisticsnum as logisticsnum,torder.logistics as logistics,torder.state as state,
		torder.name as name,torder.phone as phone,goods.name as detail_name,torder.totalPrice as totalPrice,
		torder.memo as memo,torder.ordernum as ordernum,
		concat(torder.provinceName,torder.cityName,torder.countryName,torder.address) as address,
		orderDetail.num as detail_num,orderDetail.price as detail_price,orderDetail.totalPrice as detail_totalPrice,
		t.provalue as detail_provalue,t.proname as detail_proname
		from t_order as torder
		left join t_order_detail as orderDetail on orderDetail.orderid = torder.id
		left join t_goods_sku as sku on sku.id = orderdetail.skuId 
		left join t_goods as goods on sku.goodsid = goods.id
		left join (select proval.skuid as skuid,group_concat(pro.name) as proname,
					GROUP_CONCAT(proval.value SEPARATOR '|#$%|') as provalue from t_goods_pro_val as proVal
		left join t_goods_pro as pro on pro.id = proVal.proid group by proval.skuid) as t on t.skuid = sku.id		
		where torder.id = #{orderId}
	</select>

	<!-- ******************************************************************************** -->
	
	<insert id="addOrder" parameterType="order">
	    insert into t_order (userId, address, postalCode, provinceName, cityName, countryName, ordertime, name, phone, totalPrice, memo, ordernum, state) 
		values (#{userId}, #{address}, #{postalCode}, #{provinceName}, #{cityName}, #{countryName}, #{ordertime}, #{name}, #{phone}, #{totalPrice}, #{memo}, #{ordernum}, #{state})
	</insert>
	
	<update id="updateOrder">
		update t_order set 
		address = #{address},
		postalCode = #{postalCode},
		provinceName = #{provinceName},
		cityName = #{cityName},
		countryName = #{countryName},
		memo = #{memo},
		name = #{name},
		phone = #{phone}
		where id = #{id}
	</update>
	
	<select id="getOrder" resultMap="resultMap">
		select * from t_order where userId = #{userId} and ordernum = #{orderNum}
	</select>
	
	<select id="getOrderDetail" resultMap="resultMap">
		select t_order.*, t2.detailid as detail_id, t2.orderid as detail_orderid, t2.num as detail_num, t2.price as detail_price, 
		t2.skuid as detail_skuid, t2.goodsid as detail_goodsid, t2.name as detail_name, t2.url as detail_url, t2.val as detail_val 
		from t_order, (select detail.id as detailid, detail.orderid, detail.num, detail.price, t1.* from t_order_detail as detail
		left join (select t.id as skuid, t.goodsid, t.name, t.url, GROUP_CONCAT(t.value) as val from 
		(select sku.*, goods.name, val.skuid, val.value, img.url from t_goods_sku as sku
		left join t_goods as goods on sku.goodsid = goods.id
		left join t_goods_image as img on sku.id = img.skuid
		left join t_goods_pro_val as val on sku.id = val.skuid) as t GROUP BY t.skuid) as t1 on detail.skuid = t1.skuid) as t2
		where t_order.id = t2.orderid and userid = #{userId}
		order by ordertime desc
	</select>
	
	<select id="getOrderByOrderId" resultMap="resultMap">
		select t_order.*, t2.detailid as detail_id, t2.orderid as detail_orderid, t2.num as detail_num, t2.price as detail_price, 
		t2.skuid as detail_skuid, t2.goodsid as detail_goodsid, t2.name as detail_name, t2.url as detail_url, t2.val as detail_val 
		from t_order, (select detail.id as detailid, detail.orderid, detail.num, detail.price, t1.* from t_order_detail as detail
		left join (select t.id as skuid, t.goodsid, t.name, t.url, GROUP_CONCAT(t.value) as val from 
		(select sku.*, goods.name, val.skuid, val.value, img.url from t_goods_sku as sku
		left join t_goods as goods on sku.goodsid = goods.id
		left join t_goods_image as img on sku.id = img.skuid
		left join t_goods_pro_val as val on sku.id = val.skuid) as t GROUP BY t.skuid) as t1 on detail.skuid = t1.skuid) as t2
		where t_order.id = t2.orderid and id = #{orderId}
	</select>
	
	<select id="getOrderByOrderIdAndSkuId" resultMap="resultMap">
	    select * from
		(select t_order.*, t2.detailid as detail_id, t2.orderid as detail_orderid, t2.num as detail_num, t2.price as detail_price, 
		t2.skuid as detail_skuid, t2.goodsid as detail_goodsid, t2.name as detail_name, t2.url as detail_url, t2.val as detail_val 
		from t_order, (select detail.id as detailid, detail.orderid, detail.num, detail.price, t1.* from t_order_detail as detail
		left join (select t.id as skuid, t.goodsid, t.name, t.url, GROUP_CONCAT(t.value) as val from 
		(select sku.*, goods.name, val.skuid, val.value, img.url from t_goods_sku as sku
		left join t_goods as goods on sku.goodsid = goods.id
		left join t_goods_image as img on sku.id = img.skuid
		left join t_goods_pro_val as val on sku.id = val.skuid) as t GROUP BY t.skuid) as t1 on detail.skuid = t1.skuid) as t2
		where t_order.id = t2.orderid and id = #{orderId}) as e where e.detail_skuid = #{skuId}
	</select>
	
	<select id="getOrderInfoByNoPay" resultMap="resultMap">
		select * from t_order where userid in (${ids}) and (state = 0 or state = 1)
	</select>
	
	<select id="getOrderInfoByPay" resultMap="resultMap">
		select * from t_order where userid in (${ids}) and (state = 2 or state = 3 or state = 4)
	</select>
	
	<update id="updateOrderState">
		update t_order set state = #{state} where ordernum = #{ordercode}
	</update>
	
	<update id="updateOrderStateByOrderId">
		update t_order set state = #{state} where id = #{orderId}
	</update>
	
	<select id="getOrderInfoByCode" resultMap="resultMap">
		select * from t_order where ordernum = #{orderNum}
	</select>
	
	<select id="getOrderByState" resultMap="resultMap">
		select * from t_order where state = #{state}
	</select>

</mapper>
